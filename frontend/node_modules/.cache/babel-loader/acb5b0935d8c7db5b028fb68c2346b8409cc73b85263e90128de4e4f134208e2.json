{"ast":null,"code":"import { LeafletContext, createLeafletContext } from '@react-leaflet/core';\nimport { Map as LeafletMap } from 'leaflet';\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nfunction MapContainerComponent(_ref, forwardedRef) {\n  let {\n    bounds,\n    boundsOptions,\n    center,\n    children,\n    className,\n    id,\n    placeholder,\n    style,\n    whenReady,\n    zoom,\n    ...options\n  } = _ref;\n  const [props] = useState({\n    className,\n    id,\n    style\n  });\n  const [context, setContext] = useState(null);\n  const mapInstanceRef = useRef(undefined);\n  useImperativeHandle(forwardedRef, () => context?.map ?? null, [context]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: ref callback\n  const mapRef = useCallback(node => {\n    if (node !== null && !mapInstanceRef.current) {\n      const map = new LeafletMap(node, options);\n      mapInstanceRef.current = map;\n      if (center != null && zoom != null) {\n        map.setView(center, zoom);\n      } else if (bounds != null) {\n        map.fitBounds(bounds, boundsOptions);\n      }\n      if (whenReady != null) {\n        map.whenReady(whenReady);\n      }\n      setContext(createLeafletContext(map));\n    }\n  }, []);\n  useEffect(() => {\n    return () => {\n      context?.map.remove();\n    };\n  }, [context]);\n  const contents = context ? /*#__PURE__*/React.createElement(LeafletContext, {\n    value: context\n  }, children) : placeholder ?? null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ...props,\n    ref: mapRef\n  }, contents);\n}\nexport const MapContainer = /*#__PURE__*/forwardRef(MapContainerComponent);","map":{"version":3,"names":["LeafletContext","createLeafletContext","Map","LeafletMap","React","forwardRef","useCallback","useEffect","useImperativeHandle","useRef","useState","MapContainerComponent","_ref","forwardedRef","bounds","boundsOptions","center","children","className","id","placeholder","style","whenReady","zoom","options","props","context","setContext","mapInstanceRef","undefined","map","mapRef","node","current","setView","fitBounds","remove","contents","createElement","value","ref","MapContainer"],"sources":["C:/Users/Hajar/Desktop/recommandation-marrakech/node_modules/react-leaflet/lib/MapContainer.js"],"sourcesContent":["import { LeafletContext, createLeafletContext } from '@react-leaflet/core';\nimport { Map as LeafletMap } from 'leaflet';\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nfunction MapContainerComponent({ bounds, boundsOptions, center, children, className, id, placeholder, style, whenReady, zoom, ...options }, forwardedRef) {\n    const [props] = useState({\n        className,\n        id,\n        style\n    });\n    const [context, setContext] = useState(null);\n    const mapInstanceRef = useRef(undefined);\n    useImperativeHandle(forwardedRef, ()=>context?.map ?? null, [\n        context\n    ]);\n    // biome-ignore lint/correctness/useExhaustiveDependencies: ref callback\n    const mapRef = useCallback((node)=>{\n        if (node !== null && !mapInstanceRef.current) {\n            const map = new LeafletMap(node, options);\n            mapInstanceRef.current = map;\n            if (center != null && zoom != null) {\n                map.setView(center, zoom);\n            } else if (bounds != null) {\n                map.fitBounds(bounds, boundsOptions);\n            }\n            if (whenReady != null) {\n                map.whenReady(whenReady);\n            }\n            setContext(createLeafletContext(map));\n        }\n    }, []);\n    useEffect(()=>{\n        return ()=>{\n            context?.map.remove();\n        };\n    }, [\n        context\n    ]);\n    const contents = context ? /*#__PURE__*/ React.createElement(LeafletContext, {\n        value: context\n    }, children) : placeholder ?? null;\n    return /*#__PURE__*/ React.createElement(\"div\", {\n        ...props,\n        ref: mapRef\n    }, contents);\n}\nexport const MapContainer = /*#__PURE__*/ forwardRef(MapContainerComponent);\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,oBAAoB,QAAQ,qBAAqB;AAC1E,SAASC,GAAG,IAAIC,UAAU,QAAQ,SAAS;AAC3C,OAAOC,KAAK,IAAIC,UAAU,EAAEC,WAAW,EAAEC,SAAS,EAAEC,mBAAmB,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACxG,SAASC,qBAAqBA,CAAAC,IAAA,EAA8GC,YAAY,EAAE;EAAA,IAA3H;IAAEC,MAAM;IAAEC,aAAa;IAAEC,MAAM;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,EAAE;IAAEC,WAAW;IAAEC,KAAK;IAAEC,SAAS;IAAEC,IAAI;IAAE,GAAGC;EAAQ,CAAC,GAAAZ,IAAA;EACtI,MAAM,CAACa,KAAK,CAAC,GAAGf,QAAQ,CAAC;IACrBQ,SAAS;IACTC,EAAE;IACFE;EACJ,CAAC,CAAC;EACF,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMkB,cAAc,GAAGnB,MAAM,CAACoB,SAAS,CAAC;EACxCrB,mBAAmB,CAACK,YAAY,EAAE,MAAIa,OAAO,EAAEI,GAAG,IAAI,IAAI,EAAE,CACxDJ,OAAO,CACV,CAAC;EACF;EACA,MAAMK,MAAM,GAAGzB,WAAW,CAAE0B,IAAI,IAAG;IAC/B,IAAIA,IAAI,KAAK,IAAI,IAAI,CAACJ,cAAc,CAACK,OAAO,EAAE;MAC1C,MAAMH,GAAG,GAAG,IAAI3B,UAAU,CAAC6B,IAAI,EAAER,OAAO,CAAC;MACzCI,cAAc,CAACK,OAAO,GAAGH,GAAG;MAC5B,IAAId,MAAM,IAAI,IAAI,IAAIO,IAAI,IAAI,IAAI,EAAE;QAChCO,GAAG,CAACI,OAAO,CAAClB,MAAM,EAAEO,IAAI,CAAC;MAC7B,CAAC,MAAM,IAAIT,MAAM,IAAI,IAAI,EAAE;QACvBgB,GAAG,CAACK,SAAS,CAACrB,MAAM,EAAEC,aAAa,CAAC;MACxC;MACA,IAAIO,SAAS,IAAI,IAAI,EAAE;QACnBQ,GAAG,CAACR,SAAS,CAACA,SAAS,CAAC;MAC5B;MACAK,UAAU,CAAC1B,oBAAoB,CAAC6B,GAAG,CAAC,CAAC;IACzC;EACJ,CAAC,EAAE,EAAE,CAAC;EACNvB,SAAS,CAAC,MAAI;IACV,OAAO,MAAI;MACPmB,OAAO,EAAEI,GAAG,CAACM,MAAM,CAAC,CAAC;IACzB,CAAC;EACL,CAAC,EAAE,CACCV,OAAO,CACV,CAAC;EACF,MAAMW,QAAQ,GAAGX,OAAO,GAAG,aAActB,KAAK,CAACkC,aAAa,CAACtC,cAAc,EAAE;IACzEuC,KAAK,EAAEb;EACX,CAAC,EAAET,QAAQ,CAAC,GAAGG,WAAW,IAAI,IAAI;EAClC,OAAO,aAAchB,KAAK,CAACkC,aAAa,CAAC,KAAK,EAAE;IAC5C,GAAGb,KAAK;IACRe,GAAG,EAAET;EACT,CAAC,EAAEM,QAAQ,CAAC;AAChB;AACA,OAAO,MAAMI,YAAY,GAAG,aAAcpC,UAAU,CAACM,qBAAqB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}